package com.javarush.test.level18.lesson10.bonus02;

/* Прайсы
CrUD для таблицы внутри файла
Считать с консоли имя файла для операций CrUD
Программа запускается со следующим набором параметров:
-c productName price quantity
Значения параметров:
где id - 8 символов
productName - название товара, 30 chars (60 bytes)
price - цена, 8 символов
quantity - количество, 4 символа
-c  - добавляет товар с заданными параметрами в конец файла, генерирует id самостоятельно, инкрементируя максимальный id, найденный в файле

В файле данные хранятся в следующей последовательности (без разделяющих пробелов):
id productName price quantity
Данные дополнены пробелами до их длины

Пример:
19846   Шорты пляжные синие           159.00  12
198478  Шорты пляжные черные с рисунко173.00  17
1984798 Куртка для сноубордистов, разм10173.991234
*/

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class Solution {
    public static String fileName;
    public static void main(String[] args) throws Exception {
        BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));
        fileName = reader.readLine();
        reader.close();
        String linePrise = priceLineConstructor(args);
        FileWriter writer=new FileWriter(fileName, true);
        writer.write("\n"+linePrise);
        writer.flush();
        writer.close();
    }
    public static int getMaxIdIncrement() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(fileName));
        String curentString;
        ArrayList<Integer>list=new ArrayList<>();
        while((curentString = reader.readLine())!=null){
            char[] ch= curentString.toCharArray();
            StringBuffer sb= new StringBuffer();
            for (int i = 0; i <8 ; i++) {
                    try {
                        int parse = Integer.parseInt(String.valueOf(ch[i]));
                        sb.append(ch[i]);
                    }catch (Exception e){break;}
                list.add(Integer.parseInt(sb.toString()));
            }
        }
        reader.close();
        Collections.sort(list);
        int result =list.get(list.size()-1);
        return result+1;
    }
    public static String priceLineConstructor(String []args) throws IOException {
        String id = charArrayToStr(String.valueOf(getMaxIdIncrement()),8);
        String productName= charArrayToStr(args[1],30);
        String price = charArrayToStr(args[2],8);
        String quantity = charArrayToStr(args[3],4);
        return id+productName+price+quantity;
    }
    public static String charArrayToStr(String str,int size){
        char [] strToChar=str.toCharArray();
        char [] resultChar= new char[size];
        Arrays.fill(resultChar,' ');
        for (int i = 0; i <resultChar.length ; i++) {
            try {
                resultChar[i]=strToChar[i];
            }catch (Exception e){break;}
        }
        return new String(resultChar);
    }
}
