package com.javarush.test.level17.lesson10.bonus01;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

/* CRUD
CrUD - Create, Update, Delete
Программа запускается с одним из следующих наборов параметров:
-c name sex bd
-u id name sex bd
-d id
-i id
Значения параметров:
name - имя, String
sex - пол, "м" или "ж", одна буква
bd - дата рождения в следующем формате 15/04/1990
-c  - добавляет человека с заданными параметрами в конец allPeople, выводит id (index) на экран
-u  - обновляет данные человека с данным id
-d  - производит логическое удаление человека с id
-i  - выводит на экран информацию о человеке с id: name sex (м/ж) bd (формат 15-Apr-1990)

id соответствует индексу в списке
Все люди должны храниться в allPeople
Используйте Locale.ENGLISH в качестве второго параметра для SimpleDateFormat

Пример параметров: -c Миронов м 15/04/1990
*/

public class Solution {
    public static List<Person> allPeople = new ArrayList<Person>();
    static {
        allPeople.add(Person.createMale("Иванов Иван", new Date()));  //сегодня родился    id=0
        allPeople.add(Person.createMale("Петров Петр", new Date()));  //сегодня родился    id=1
    }

    public static void main(String[] args) throws ParseException {
        if(args[0].equals("-i")&&args.length==2){printPerson(args);}
        else if(args[0].equals("-d")&&args.length==2){deletePerson(args);}
        else if (args[0].equals("-c")&&args.length==4){addPerson(args);}
        else if(args[0].equals("-u")&&args.length==5){changePerson(args);}
    }
    static void printPerson(String[]args){
        Person person = allPeople.get(Integer.parseInt(args[1]));
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy", Locale.ENGLISH) ;
        Date date = person.getBirthDay();
        String personSex = null;
        if(person.getSex().equals(Sex.MALE)){
            personSex="м";
        }else if (person.getSex().equals(Sex.FEMALE)){
            personSex="ж";
        }
        System.out.println(person.getName()+" "+personSex+" "+sdf.format(date));
    }
    static void deletePerson(String[]args){
        Person person = allPeople.get(Integer.parseInt(args[1]));
        person.setBirthDay(null);
        person.setName(null);
        person.setSex(null);
        allPeople.set(Integer.parseInt(args[1]),person);
    }
    static void addPerson(String[]args) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy",Locale.ENGLISH);
        if(args[2].equals("м")){
         allPeople.add(Person.createMale(args[1],sdf.parse(args[3])));
        }else if(args[2].equals("ж")){
            allPeople.add(Person.createFemale(args[1],sdf.parse(args[3])));
        }
        System.out.println(allPeople.size()-1);
//        String[]mas={"1",String.valueOf(allPeople.size()-1)};
//        printPerson(mas);
    }
    static void changePerson(String[]args) throws ParseException {
        Person person = allPeople.get(Integer.parseInt(args[1]));
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy",Locale.ENGLISH);
        if(args[3].equals("м")){
            person.setSex(Sex.MALE);
            person.setName(args[2]);
            person.setBirthDay(sdf.parse(args[4]));
        }
        else if(args[3].equals("ж")){
            person.setSex(Sex.FEMALE);
            person.setName(args[2]);
            person.setBirthDay(sdf.parse(args[4]));
        }
        allPeople.set(Integer.parseInt(args[1]),person);
//        printPerson(args);
//        System.out.println(args[1]);
    }
}

