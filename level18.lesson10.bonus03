package com.javarush.test.level18.lesson10.bonus03;

/* Прайсы 2
CrUD для таблицы внутри файла
Считать с консоли имя файла для операций CrUD
Программа запускается с одним из следующих наборов параметров:
-u id productName price quantity
-d id
Значения параметров:
где id - 8 символов
productName - название товара, 30 chars (60 bytes)
price - цена, 8 символов
quantity - количество, 4 символа
-u  - обновляет данные товара с заданным id
-d  - производит физическое удаление товара с заданным id (все данные, которые относятся к переданному id)

В файле данные хранятся в следующей последовательности (без разделяющих пробелов):
id productName price quantity
Данные дополнены пробелами до их длины

Пример:
19846   Шорты пляжные синие           159.00  12
198478  Шорты пляжные черные с рисунко173.00  17
19847983Куртка для сноубордистов, разм10173.991234
*/

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;

public class Solution {
    public static String fileName;
    public static int lineNumber=0;
    public static ArrayList<String>list=new ArrayList<>();
    public static void main(String[] args) throws IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        fileName= reader.readLine();
        reader.close();
        list=readFileInList(fileName);
        if(args[0].equals("-d")){
            deleteById(getLineById(args[1]));
        }else if(args[0].equals("-u")){
            updatePrice(getLineById(args[1]),args);
        }
    }
    public static String getLineById(String id) throws IOException {
        String result=null;
        for (int i = 0; i <list.size() ; i++) {
            String s = list.get(i).substring(0,id.length());
            if(s.equals(id)){
                result=list.get(i);
            }
        }
        return result;
      }

    public static void deleteById(String line) throws IOException {
        FileWriter writer = new FileWriter(fileName);
        for (int i = 0; i <list.size() ; i++) {
            if(!list.get(i).equals(line)){
                writer.write(list.get(i)+"\n");
            }
        }
        writer.flush();
        writer.close();
    }

    public static ArrayList readFileInList(String fileName) throws IOException {
        ArrayList<String>list=new ArrayList<>();
        BufferedReader readerFile = new BufferedReader(new FileReader(fileName));
        String line;
        while ((line=readerFile.readLine())!=null){
            list.add(line);
        }
        readerFile.close();
        return list;
    }
    public static void updatePrice(String lineById,String[]args) throws IOException {
        String line = priceLineConstructor(args);
        FileWriter writer = new FileWriter(fileName);
        for (int i = 0; i < list.size(); i++) {
           if(list.get(i).equals(lineById)){
               writer.write(line+"\n");
           }else {
               writer.write(list.get(i)+"\n");
           }
        }
        writer.flush();
        writer.close();
    }
    public static String priceLineConstructor(String []args) throws IOException {
        String id = charArrayToStr(args[1],8);
        String productName= charArrayToStr(args[2],30);
        String price = charArrayToStr(args[3],8);
        String quantity = charArrayToStr(args[4],4);
        return id+productName+price+quantity;
    }
    public static String charArrayToStr(String str,int size){
        char [] strToChar=str.toCharArray();
        char [] resultChar= new char[size];
        Arrays.fill(resultChar,' ');
        for (int i = 0; i <resultChar.length ; i++) {
            try {
                resultChar[i]=strToChar[i];
            }catch (Exception e){break;}
        }
        return new String(resultChar);
    }
}
